% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/entity_combine_by_iso_fun.R
\name{entity_combine_by_iso}
\alias{entity_combine_by_iso}
\title{Name and unique Entity Type combination by ISO}
\usage{
entity_combine_by_iso(df1, df2, string_column)
}
\arguments{
\item{df1}{The data frame to be cleaned containing an 'iso' column, the names of the entities and other attributes. This data frame
provides the base structure for the output.}

\item{df2}{The reference data frame (i.e key_dict) containing both an 'iso' column and the \code{string_column} (ent_type_eng)
This data frame provides the unique strings that will be used to create a complete name of the potential entity for each country}

\item{string_column}{A character string specifying the name of the column in \code{df2}
that contains the entity types or unique strings to be combined with \code{df1}.}
}
\value{
A new data frame where all rows from the original \code{df1} have been
  repeated for every unique string value from the specified \code{string_column}
  (from \code{df2}), all conditional on the matching 'iso' code. Returns \code{NULL}
  if the resulting list of data frames is empty.
}
\description{
This function takes two data frames (\code{df1} and \code{df2}) usually the key_dict and performs a conditional cross-join.
It iterates over unique 'iso' codes found in \code{df1}. For each 'iso', it filters both data frames
and then creates a new data frame by appending every unique value from the specified \code{string_column} usually ent_type_eng
in \code{df2}.

Both \code{df1} and \code{df2} must contain a column named 'iso'.For direct use \code{df2} should be the key_dict and
\code{string_column} should be 'ent_type_eng'. Alternative dataframes and variables can be used.
}
\examples{
# Assume 'df1' and 'df2' are loaded and required packages (dplyr, purrr) are attached.
df1 <- data.frame(iso = c("USA", "CAN", "USA"),
                  name = c("New York", "Ontario", "Chapel Hill"))

df2 <- data.frame(iso = c("USA", "USA", "CAN", "CAN", "USA"),
                  ent_type_eng = c("City", "State", "Province", "City", "Town"))

result_entity <- entity_combine_by_iso(df1, df2, "entity")
# result_entity will have 8 rows:
# USA New York City City of New York
# USA Chapel Hill City City of Chapel Hill
# USA New York 10 State City of New York
# USA Chapel Hill State State of Chapel Hill
# USA New York 10 Town Town of New York
# USA Chapel Hill Town Town of Chappel Hill
# CAN Ontario Province Province of Ontario
# CAN Ontario City City of Ontario
}
